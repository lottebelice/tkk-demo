<?xml version="1.0" ?>

<!-- TODO: the project name has to start with 'smt_' and has to ends with 'app' -->
<project name="smt_newsapp" default="provision-copy">

  <property name="root.dir" value="." />
  <property name="sources.dir" value="${root.dir}/src" />
  <property name="dist.dir" value="${root.dir}/dist" />
  <property name="build.dir" value="${root.dir}/build" />
  <property name="classes.dir" value="${build.dir}/classes" />
  <property name="lib.dir" value="${root.dir}/libs" />
  <property name="test.sources.dir" value="${root.dir}/test" />
  <property name="test.build.dir" value="${root.dir}/build-test" />
  <property name="tools.dir" value="${root.dir}/tools" />
  <property name="webcontent.dir" value="${root.dir}/WebContent" />
  <property name="webcontent.lib.dir" value="${webcontent.dir}/WEB-INF/lib" />
  <property name="doc.dir" value="${root.dir}/doc"/>

  <!-- Define maven-ant-tasks location -->
  <property name="maven.ant.tasks.jar" value="${tools.dir}/maven-ant-tasks-2.1.3.jar"/>
  <property name="maven.ant.tasks.bootstrap.location" value="http://apache.xl-mirror.nl/maven/binaries/maven-ant-tasks-2.1.3.jar"/>
  <available property="maven.ant.tasks.jar.exists" file="${maven.ant.tasks.jar}"/>

  <!-- Define package name and location -->
  <property name="package.name.jar" value="${ant.project.name}.jar"/>
  <property name="package.location.jar" value="${build.dir}/${package.name.jar}"/>
  <property name="package.name.war" value="${ant.project.name}.war"/>
  <property name="package.location.war" value="${dist.dir}/${package.name.war}"/>

  <!-- Removes all directories -->
  <target name="clean-src">
    <delete dir="${dist.dir}" />
    <delete dir="${build.dir}" />
    <delete dir="${classes.dir}" />
  </target>

  <!-- Removes all test directories -->
  <target name="clean-test">
    <delete dir="${test.build.dir}" />
  </target>


  <!-- Creates all necessary directories -->
  <target name="init-src" depends="clean-src">
    <mkdir dir="${dist.dir}" />
    <mkdir dir="${build.dir}" />
    <mkdir dir="${classes.dir}" />
  </target>

  <!-- Creates all necessary directories -->
  <target name="init-test" depends="clean-test">
    <mkdir dir="${test.build.dir}" />
  </target>

  <!-- Downloads the "latest version" of the maven-ant-tasks if needed -->
  <target name="bootstrap.maven.tasks" unless="maven.ant.tasks.jar.exists">
    <mkdir dir="${tools.dir}"/>
    <get src="${maven.ant.tasks.bootstrap.location}" dest="${maven.ant.tasks.jar}"/>
  </target>

  <!-- define dependencies in ant file -->
  <target name="init-deps" unless="compile.deps" depends="bootstrap.maven.tasks" xmlns:artifact="urn:maven-artifact-ant">
    <typedef resource="org/apache/maven/artifact/ant/antlib.xml" uri="urn:maven-artifact-ant" classpath="${maven.ant.tasks.jar}"/>

    <artifact:dependencies pathId="compile.deps" filesetId="compile.fileset" useScope="compile">
      <remoteRepository id="restlet" url="http://maven.restlet.org" />
      <remoteRepository id="gson" url="https://oss.sonatype.org" />

      <dependency groupId="log4j" artifactId="log4j" version="1.2.16"/>
      <dependency groupId="dom4j" artifactId="dom4j" version="1.6.1"/>
      <dependency groupId="commons-net" artifactId="commons-net" version="2.0"/>
      <dependency groupId="commons-httpclient" artifactId="commons-httpclient" version="3.1"/>
      <dependency groupId="jaxen" artifactId="jaxen" version="1.1.1"/>
      <dependency groupId="org.restlet.jee" artifactId="org.restlet" version="2.0.10"/>
      <dependency groupId="org.restlet.jee" artifactId="org.restlet.ext.xml" version="2.0.10"/>
      <dependency groupId="org.restlet.jee" artifactId="org.restlet.ext.servlet" version="2.0.10"/>
      <dependency groupId="com.google.code.gson" artifactId="gson" version="2.2.4" />
    </artifact:dependencies>
    <artifact:dependencies pathId="test.deps" filesetId="test.fileset" useScope="test">
      <dependency groupId="junit" artifactId="junit" version="4.11"/>
      <dependency groupId="org.hamcrest" artifactId="hamcrest-core" version="1.3"/>
    </artifact:dependencies>
    <artifact:dependencies pathId="provided.deps" filesetId="provided.fileset">
      <dependency groupId="javax.servlet" artifactId="servlet-api" version="2.5" scope="provided"/>
    </artifact:dependencies>
    <artifact:dependencies pathId="runtime.deps" filesetId="runtime.fileset">
    </artifact:dependencies>
  </target>

  <!-- still dependent on local libraries -->
  <path id="extra-lib.deps">
    <fileset id="lib.fileset" dir="${lib.dir}" includes="*.jar"/>
  </path>


  <!-- Copile source code -->
  <target name="compile-src-only">
    <javac srcdir="${sources.dir}" destdir="${classes.dir}" debug="on">
      <classpath>
        <path refid="compile.deps"/>
        <path refid="provided.deps"/>
        <path refid="extra-lib.deps"/>
      </classpath>
    </javac>
  </target>
  <target name="compile-src" depends="init-src, init-deps, compile-src-only"/>

  <!-- Copile test code -->
  <target name="compile-test-only">
    <javac srcdir="${test.sources.dir}" destdir="${test.build.dir}" debug="on">
      <classpath>
        <path location="${classes.dir}"/>
        <path refid="compile.deps"/>
        <path refid="provided.deps"/>
        <path refid="extra-lib.deps"/>
        <path refid="test.deps"/>
      </classpath>
    </javac>
  </target>
  <target name="compile-test" depends="init-test, init-deps, compile-test-only"/>

  <!-- Jar package build -->
  <target name="build-src" depends="compile-src">
    <delete file="${package.location.jar}"/>
    <jar jarfile="${package.location.jar}" basedir="${classes.dir}">
      <manifest>
        <attribute name="Built-By" value="Noterik B.V."/>
        <attribute name="Main-Class" value=""/>
      </manifest>
    </jar>
  </target>

  <!-- War package build -->
  <target name="create-war" depends="build-src">
    <copy todir="${webcontent.lib.dir}" file="${package.location.jar}" />
    <war destfile="${package.location.war}" webxml="${webcontent.dir}/WEB-INF/web.xml">
      <fileset dir="${webcontent.dir}">
        <exclude name="WEB-INF/lib/lou.jar" />
        <exclude name="WEB-INF/lib/springfield-tools.jar" />
        <exclude name="WEB-INF/lib/c*" />
        <exclude name="WEB-INF/lib/x*" />
        <exclude name="WEB-INF/lib/o*" />
        <exclude name="WEB-INF/lib/d*" />
        <exclude name="WEB-INF/lib/i*" />
        <exclude name="WEB-INF/lib/j*" />
        <exclude name="WEB-INF/lib/l*" />
        <exclude name="WEB-INF/web.xml" />
      </fileset>
    </war>
  </target>


  <target name="provision-copy" depends="create-war">
    <copy file="${package.location.war}" todir="${root.dir}/../../springfield/lou/uploaddir" />
  </target>

  <target name="provision-ssh" depends="create-war">
    <scp file="${package.location.war}" todir="${deploy.user}@${deploy.host}:${lou.uploaddir}" password="${deploy.password}" />
  </target>


  <target name="run-test-only">
    <junit dir="${test.build.dir}" printsummary="yes" haltonfailure="yes" >
      <classpath >
        <path location="${classes.dir}"/>
        <path location="${test.build.dir}"/>
        <path refid="compile.deps"/>
        <path refid="extra-lib.deps"/>
        <path refid="test.deps"/>
      </classpath>

      <formatter type="plain"/>

      <batchtest fork="yes" todir="${test.build.dir}">
        <fileset dir="${test.sources.dir}">
          <include name="**/*Test*.java"/>
        </fileset>
      </batchtest>
    </junit>
  </target>
  <target name="run-test" depends="init-deps, run-test-only"/>

  <target name="test" depends="compile-src, compile-test, run-test"/>

  <target name="dev" depends="init-deps, compile-src-only, compile-test-only, run-test-only"/>

  <!-- fetch and update the maven dependencies living in our WebContent directory -->
  <target name="update-deps" depends="init-deps">
    <copy todir="${webcontent.lib.dir}">
      <fileset refid="compile.fileset" />
      <fileset refid="lib.fileset" />
      <fileset refid="test.fileset" />
      <mapper type="flatten" />
    </copy>
  </target>

</project>
